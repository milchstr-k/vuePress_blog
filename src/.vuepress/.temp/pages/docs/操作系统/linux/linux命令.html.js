export const data = JSON.parse("{\"key\":\"v-77de7e7a\",\"path\":\"/docs/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/linux%E5%91%BD%E4%BB%A4.html\",\"title\":\"Linux命令\",\"lang\":\"zh-CN\",\"frontmatter\":{\"icon\":\"pen-to-square\",\"category\":[\"Linux\"],\"tag\":[\"命令\"],\"description\":\"Linux命令 📌 关键词： Linux、命令 进程杀死 // 经过 killall 指令 killall nginx // 经过 pkill 指令，类似于 pgrep + kill pkill nginx // 经过先查找再 kill 的方法 ps -ef | grep nginx | grep -v grep | awk '{print $2}' | xargs kill -9 // 用 cut -c 来截取指定位置的字符串 ps -ef | grep nginx | grep -v grep | cut -c 11-15 | xargs kill -9 // 经过 pgrep 指令，根据名字找出一切包括该名字的进程号 pgrep nginx | xargs kill -9 // 经过 pidof 指令，根据进程全名找出进程号 pidof nginx | kill -9 // 除了管道符的方法，也可以用指令替换，这样就不用经过 xargs 转化参数了 kill -9 `pgrep nginx`\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://mister-hope.github.io/docs/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/linux%E5%91%BD%E4%BB%A4.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"milchstraße's Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Linux命令\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"Linux命令 📌 关键词： Linux、命令 进程杀死 // 经过 killall 指令 killall nginx // 经过 pkill 指令，类似于 pgrep + kill pkill nginx // 经过先查找再 kill 的方法 ps -ef | grep nginx | grep -v grep | awk '{print $2}' | xargs kill -9 // 用 cut -c 来截取指定位置的字符串 ps -ef | grep nginx | grep -v grep | cut -c 11-15 | xargs kill -9 // 经过 pgrep 指令，根据名字找出一切包括该名字的进程号 pgrep nginx | xargs kill -9 // 经过 pidof 指令，根据进程全名找出进程号 pidof nginx | kill -9 // 除了管道符的方法，也可以用指令替换，这样就不用经过 xargs 转化参数了 kill -9 `pgrep nginx`\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Milchstraße\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"命令\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Linux命令\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Milchstraße\\\",\\\"url\\\":\\\"https://mrhope.site\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"进程杀死\",\"slug\":\"进程杀死\",\"link\":\"#进程杀死\",\"children\":[]}],\"readingTime\":{\"minutes\":0.62,\"words\":186},\"filePathRelative\":\"docs/操作系统/linux/linux命令.md\",\"excerpt\":\"<h1> Linux命令</h1>\\n<blockquote>\\n<p>📌 <strong>关键词：</strong> Linux、命令</p>\\n</blockquote>\\n<h2> 进程杀死</h2>\\n<div class=\\\"language-java line-numbers-mode\\\" data-ext=\\\"java\\\"><pre class=\\\"language-java\\\"><code>\\n<span class=\\\"token comment\\\">// 经过 killall 指令</span>\\nkillall nginx\\n<span class=\\\"token comment\\\">// 经过 pkill 指令，类似于 pgrep + kill</span>\\npkill nginx\\n<span class=\\\"token comment\\\">// 经过先查找再 kill 的方法</span>\\nps <span class=\\\"token operator\\\">-</span>ef <span class=\\\"token operator\\\">|</span> grep nginx <span class=\\\"token operator\\\">|</span> grep <span class=\\\"token operator\\\">-</span>v grep <span class=\\\"token operator\\\">|</span> awk '<span class=\\\"token punctuation\\\">{</span>print $<span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">}</span>' <span class=\\\"token operator\\\">|</span> xargs kill <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">9</span>\\n<span class=\\\"token comment\\\">// 用 cut -c 来截取指定位置的字符串</span>\\nps <span class=\\\"token operator\\\">-</span>ef <span class=\\\"token operator\\\">|</span> grep nginx <span class=\\\"token operator\\\">|</span> grep <span class=\\\"token operator\\\">-</span>v grep <span class=\\\"token operator\\\">|</span> cut <span class=\\\"token operator\\\">-</span>c <span class=\\\"token number\\\">11</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">15</span> <span class=\\\"token operator\\\">|</span> xargs kill <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">9</span>\\n<span class=\\\"token comment\\\">// 经过 pgrep 指令，根据名字找出一切包括该名字的进程号</span>\\npgrep nginx <span class=\\\"token operator\\\">|</span> xargs kill <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">9</span>\\n<span class=\\\"token comment\\\">// 经过 pidof 指令，根据进程全名找出进程号</span>\\npidof nginx <span class=\\\"token operator\\\">|</span> kill <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">9</span>\\n<span class=\\\"token comment\\\">// 除了管道符的方法，也可以用指令替换，这样就不用经过 xargs 转化参数了</span>\\nkill <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">9</span> `pgrep nginx`\\n\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
